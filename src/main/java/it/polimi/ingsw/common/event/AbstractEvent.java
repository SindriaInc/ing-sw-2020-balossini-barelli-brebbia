package it.polimi.ingsw.common.event;

import com.google.gson.annotations.Expose;
import it.polimi.ingsw.controller.ResponseEventProvider;
import it.polimi.ingsw.model.ModelEventProvider;
import it.polimi.ingsw.view.ViewEventProvider;

import java.util.List;
import java.util.Optional;

/**
 * An event may be generated by the View, the Model or the Controller
 * Events may be sent from the server or from a client
 * Events sent by clients have a sender, the player who sent the message
 * The model may send client-sent events to other clients, in which case the sender is the same as the original sender
 *
 * Events sent by the model may be sent to more than one player by specifying receivers
 */
public abstract class AbstractEvent {

    @Expose(serialize = false, deserialize = false)
    private List<String> receivers = null;

    /**
     * Call the appropriate observer in the ModelEventProvider if present
     * @param provider The ModelEventProvider (the visitor)
     * @throws IllegalStateException if the actual event is not a Model -> View event
     */
    public void accept(ModelEventProvider provider) {
        throw new IllegalStateException("Not a model event");
    }

    /**
     * Call the appropriate observer in the ResponseEventProvider if present
     * @param provider The ResponseEventProvider (the visitor)
     * @throws IllegalStateException if the actual event is not a Controller -> View event
     */
    public void accept(ResponseEventProvider provider) {
        throw new IllegalStateException("Not a controller event");
    }

    /**
     * Call the appropriate observer in the ViewEventProvider if present
     * @param provider The ViewEventProvider (the visitor)
     * @throws IllegalStateException if the actual event is not a View -> Model event
     */
    public void accept(ViewEventProvider provider) {
        throw new IllegalStateException("Not a view event");
    }

    public Optional<String> getSender() {
        return Optional.empty();
    }

    public Optional<List<String>> getReceivers() {
        return Optional.ofNullable(receivers);
    }

    public void setReceivers(List<String> receivers) {
        this.receivers = receivers;
    }

}
